// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id            String                 @id @unique @default(uuid())
  email         String                 @unique
  password      String
  username      String                 @unique
  refreshTokens RefreshToken[]
  user          User[]
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  deletedAt     DateTime?
  content       Content[]
  alreadyViewed AlreadyViewedContent[]
  like          Like[]
  comment       Comment[]
  follower      Follow[]               @relation("follower")
  following     Follow[]               @relation("following")
}

model User {
  id        String    @id @unique @default(uuid())
  fullName  String
  avatar    String?
  bio       String?   @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  account   Account   @relation(fields: [accountId], references: [id])
  accountId String
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String
  accountId   String
  account     Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Content {
  id            String                 @id @unique @default(uuid())
  mediaUrl      String
  caption       String?                @db.Text
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  deletedAt     DateTime?
  author        Account                @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId      String
  alreadyViewed AlreadyViewedContent[]
  like          Like[]
  comment       Comment[]
}

model AlreadyViewedContent {
  id        String    @id @unique @default(uuid())
  contentId String
  content   Content   @relation(fields: [contentId], references: [id], onDelete: Cascade)
  viewerId  String
  viewer    Account   @relation(fields: [viewerId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Like {
  id        String    @id @unique @default(uuid())
  contentId String
  content   Content   @relation(fields: [contentId], references: [id], onDelete: Cascade)
  accountId String
  account   Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Comment {
  id        String    @id @unique @default(uuid())
  contentId String
  content   Content   @relation(fields: [contentId], references: [id], onDelete: Cascade)
  accountId String
  account   Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  comment   String    @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Follow {
  id          String    @id @unique @default(uuid())
  followerId  String
  follower    Account   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   Account   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@index([followerId, followingId])
}
